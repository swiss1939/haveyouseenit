# tracker/models.py

import uuid
from django.db import models
from django.contrib.auth.models import User

# --- 1. Supporting Tables (For Stats) ---

class Genre(models.Model):
    name = models.CharField(max_length=50, unique=True)
    def __str__(self): return self.name

class Actor(models.Model):
    name = models.CharField(max_length=255, unique=True)
    imdb_id = models.CharField(max_length=15, unique=True, null=True, blank=True)
    tmdb_id = models.IntegerField(unique=True, null=True, blank=True)
    def __str__(self): return self.name

class Cinematographer(models.Model):
    name = models.CharField(max_length=255, unique=True)
    imdb_id = models.CharField(max_length=15, unique=True, null=True, blank=True)
    tmdb_id = models.IntegerField(unique=True, null=True, blank=True)
    def __str__(self): return self.name

class Director(models.Model):
    name = models.CharField(max_length=255, unique=True)
    imdb_id = models.CharField(max_length=20, unique=True, null=True, blank=True)
    tmdb_id = models.IntegerField(unique=True, null=True, blank=True)
    def __str__(self): return self.name

class Producer(models.Model):
    name = models.CharField(max_length=255, unique=True)
    imdb_id = models.CharField(max_length=20, unique=True, null=True, blank=True)
    tmdb_id = models.IntegerField(unique=True, null=True, blank=True)
    def __str__(self): return self.name


# --- 2. Core Tables ---

class Movie(models.Model):
    title = models.CharField(max_length=255)
    release_year = models.IntegerField()
    runtime_minutes = models.IntegerField(null=True, blank=True)
    revenue = models.BigIntegerField(default=0)
    plot_summary = models.TextField(null=True, blank=True)
    imdb_id = models.CharField(max_length=15, unique=True, null=True, blank=True)
    tmdb_id = models.IntegerField(unique=True, null=True, blank=True)
    poster_url = models.URLField(max_length=500, null=True, blank=True)
    genre = models.ManyToManyField(Genre)
    actors = models.ManyToManyField(Actor)
    cinematographers = models.ManyToManyField(Cinematographer)
    directors = models.ManyToManyField(Director)
    producers = models.ManyToManyField(Producer)
    def __str__(self): return f"{self.title} ({self.release_year})"

class UserMovieView(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    movie = models.ForeignKey(Movie, on_delete=models.CASCADE)
    has_seen = models.BooleanField(default=False)
    date_recorded = models.DateTimeField(auto_now_add=True)
    class Meta:
        unique_together = ('user', 'movie')
    def __str__(self):
        status = "Seen" if self.has_seen else "Unseen"
        return f"{self.user.username} - {self.movie.title} ({status})"

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    date_of_birth = models.DateField(null=True, blank=True)
    join_date = models.DateTimeField(auto_now_add=True)
    last_activity = models.DateTimeField(auto_now=True)
    def __str__(self): return f"Profile for {self.user.username}"


# --- 3. NEW Social and Invite Models ---

def generate_invite_code():
    """Generates a unique, 8-character invite code."""
    return str(uuid.uuid4().hex)[:8].upper()

class InviteCode(models.Model):
    code = models.CharField(max_length=8, unique=True, default=generate_invite_code)
    generated_by = models.ForeignKey(User, related_name='generated_codes', on_delete=models.SET_NULL, null=True, blank=True)
    used_by = models.OneToOneField(User, related_name='used_code', on_delete=models.SET_NULL, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    used_at = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return f"Code {self.code} (Generated by: {self.generated_by.username if self.generated_by else 'Admin'})"

class Friendship(models.Model):
    class Status(models.TextChoices):
        PENDING = 'PENDING', 'Pending'
        ACCEPTED = 'ACCEPTED', 'Accepted'

    from_user = models.ForeignKey(User, related_name='friendship_creator', on_delete=models.CASCADE)
    to_user = models.ForeignKey(User, related_name='friendship_receiver', on_delete=models.CASCADE)
    status = models.CharField(max_length=8, choices=Status.choices, default=Status.PENDING)
    created_at = models.DateTimeField(auto_now_add=True)
    accepted_at = models.DateTimeField(null=True, blank=True)

    class Meta:
        # A user can only send one friend request to another user
        unique_together = ('from_user', 'to_user')

    def __str__(self):
        return f"{self.from_user.username} to {self.to_user.username} ({self.status})"