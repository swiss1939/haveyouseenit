# tracker/forms.py

from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from django.core.exceptions import ValidationError
from django.db import transaction
from django.utils import timezone
from .models import Profile, InviteCode, Friendship

class CustomUserCreationForm(UserCreationForm):
    # --- ADD THE NEW INVITE CODE FIELD ---
    invite_code = forms.CharField(
        max_length=8,
        required=True,
        label='Invite Code',
        help_text='An invite code is required to create an account.'
    )

    email = forms.EmailField(required=True, help_text='Required. Used for account recovery and communication.')
    first_name = forms.CharField(max_length=50, required=True, label='First Name')
    last_name = forms.CharField(max_length=50, required=True, label='Last Name')
    date_of_birth = forms.DateField(
        required=True,
        widget=forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
        label='Date of Birth'
    )

    class Meta(UserCreationForm.Meta):
        model = User
        # Add the new field to the form's fields list
        fields = UserCreationForm.Meta.fields + ('email', 'first_name', 'last_name', 'invite_code',)

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field_name, field in self.fields.items():
            if field_name not in ['password', 'password2']:
                current_classes = field.widget.attrs.get('class', '')
                field.widget.attrs['class'] = current_classes + ' form-control'

    def clean_email(self):
        email = self.cleaned_data.get('email')
        if email and User.objects.filter(email__iexact=email).exists():
            raise ValidationError("This email address is already in use. Please use a different one.")
        return email

    # --- ADD CUSTOM VALIDATION FOR THE INVITE CODE ---
    def clean_invite_code(self):
        code_str = self.cleaned_data.get('invite_code').upper()
        try:
            invite_code = InviteCode.objects.get(code=code_str)
            if invite_code.used_by is not None:
                raise ValidationError("This invite code has already been used.")
        except InviteCode.DoesNotExist:
            raise ValidationError("Invalid invite code.")
        
        # Store the valid code object in the form's cleaned data for later use
        self.cleaned_data['invite_code_obj'] = invite_code
        return code_str

    @transaction.atomic
    def save(self, commit=True):
        # Create the user first. This triggers the signal to create an empty profile.
        user = super().save(commit=True)

        # Update the User and Profile with our form data.
        user.email = self.cleaned_data["email"]
        user.first_name = self.cleaned_data["first_name"]
        user.last_name = self.cleaned_data["last_name"]
        user.profile.date_of_birth = self.cleaned_data["date_of_birth"]
        
        # --- UPDATE THE INVITE CODE AND CREATE THE FRIENDSHIP ---
        invite_code = self.cleaned_data['invite_code_obj']
        
        # 1. Mark the code as used
        invite_code.used_by = user
        invite_code.used_at = timezone.now()
        
        # 2. If the code was generated by another user, become friends
        if invite_code.generated_by:
            inviter = invite_code.generated_by
            # Create the two-way friendship with 'ACCEPTED' status
            Friendship.objects.create(from_user=inviter, to_user=user, status=Friendship.Status.ACCEPTED)
            Friendship.objects.create(from_user=user, to_user=inviter, status=Friendship.Status.ACCEPTED)

        # Save all changes
        if commit:
            user.save()
            user.profile.save()
            invite_code.save()
        
        return user